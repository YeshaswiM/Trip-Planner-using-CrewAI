#!/usr/bin/env python3
"""
Test PDF generation functionality
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_pdf_generation():
    """Test the PDF generation functionality."""
    print("üß™ Testing PDF Generation")
    print("=" * 40)
    
    try:
        from reportlab.lib.pagesizes import letter
        from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
        from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
        from reportlab.lib.units import inch
        from io import BytesIO
        import re
        
        # Test content
        content = """
# üèñÔ∏è VacAIgent Trip Plan

**Generated on:** July 13, 2025 at 12:00 PM

**Trip Details:**
- **Origin:** San Francisco, CA
- **Destination:** Bali, Indonesia
- **Travel Dates:** August 15, 2025 to August 22, 2025
- **Passengers:** 2

## ‚úàÔ∏è Flight Options

**üí∞ CHEAPEST OPTION:**
‚Ä¢ Airline: Spirit Airlines
‚Ä¢ Price: $890 - $1,200

**‚≠ê RECOMMENDED:**
‚Ä¢ Airline: Southwest Airlines  
‚Ä¢ Price: $1,200 - $1,800

---

*This trip plan was generated by VacAIgent*
        """
        
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=letter, topMargin=1*inch)
        styles = getSampleStyleSheet()
        
        # Custom styles
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=24,
            spaceAfter=30,
            textColor='blue'
        )
        
        story = []
        
        # Convert markdown to simple text for PDF
        lines = content.split('\n')
        for line in lines:
            line = line.strip()
            if not line:
                story.append(Spacer(1, 6))
            elif line.startswith('# '):
                story.append(Paragraph(line[2:], title_style))
            elif line.startswith('## '):
                story.append(Paragraph(line[3:], styles['Heading2']))
            elif line.startswith('**') and line.endswith('**'):
                story.append(Paragraph(f"<b>{line[2:-2]}</b>", styles['Normal']))
            elif line.startswith('- ') or line.startswith('‚Ä¢ '):
                story.append(Paragraph(f"‚Ä¢ {line[2:]}", styles['Normal']))
            elif line.startswith('*') and line.endswith('*'):
                story.append(Paragraph(f"<i>{line[1:-1]}</i>", styles['Normal']))
            else:
                # Clean up markdown formatting
                clean_line = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', line)
                clean_line = re.sub(r'\*(.*?)\*', r'<i>\1</i>', clean_line)
                if clean_line:
                    story.append(Paragraph(clean_line, styles['Normal']))
        
        doc.build(story)
        pdf_data = buffer.getvalue()
        buffer.close()
        
        # Save test PDF
        with open('test_trip_plan.pdf', 'wb') as f:
            f.write(pdf_data)
        
        print("‚úÖ PDF generation test successful!")
        print(f"üìÑ Test PDF created: test_trip_plan.pdf ({len(pdf_data)} bytes)")
        
    except Exception as e:
        print(f"‚ùå PDF generation test failed: {str(e)}")
        return False
    
    return True

if __name__ == "__main__":
    test_pdf_generation()
